Logic is :- we have a string then we take the 1st char and check if it is a palindrome if yes add, then take another char and when string is fully checked then add all the string in result. If s is not palindrome then leave that.

1st we take 1-1 char then we take 2 char and atlast take full string in this manner we proceed.
Approach 1: Backtracking
Intuition

The idea is to generate all possible substrings of a given string and expand each possibility if is a potential candidate. The first thing that comes to our mind is Depth First Search. In Depth First Search, we recursively expand potential candidate until the defined goal is achieved. After that, we backtrack to explore the next potential candidate.

Backtracking incrementally build the candidates for the solution and discard the candidates (backtrack) if it doesn't satisfy the condition.

The backtracking algorithms consists of the following steps:

Choose: Choose the potential candidate. Here, our potential candidates are all substrings that could be generated from the given string.

Constraint: Define a constraint that must be satisfied by the chosen candidate. In this case, the constraint is that the string must be a palindrome.

Goal: We must define the goal that determines if have found the required solution and we must backtrack. Here, our goal is achieved if we have reached the end of the string.

Algorithm

In the backtracking algorithm, we recursively traverse over the string in depth-first search fashion. For each recursive call, the beginning index of the string is given as \text{start}start.

Iteratively generate all possible substrings beginning at \text{start}start index. The \text{end}end index increments from \text{start}start till the end of the string.

For each of the substring generated, check if it is a palindrome.

If the substring is a palindrome, the substring is a potential candidate. Add substring to the \text{currentList}currentList and perform a depth-first search on the remaining substring. If current substring ends at index \text{end}end, \text{end}+1end+1 becomes the \text{start}start index for the next recursive call.

Backtrack if \text{start}start index is greater than or equal to the string length and add the \text{currentList}currentList to the result.

    public List<List<String>> partition(String s) {
        List<List<String>> result = new ArrayList<List<String>>();
        dfs(0, result, new ArrayList<String>(), s);
        return result;
    }

    void dfs(int start, List<List<String>> result, List<String> currentList, String s) {
        if (start >= s.length()) 
            result.add(new ArrayList<String>(currentList));
        
        for (int i = start; i < s.length(); i++) {
            if (isPalindrome(s, start, i)) {
                // add current substring in the currentList
                currentList.add(s.substring(start, i + 1));
                dfs(i + 1, result, currentList, s);
                // backtrack and remove the current substring from currentList
                currentList.remove(currentList.size() - 1);
            }
        }
    }

    boolean isPalindrome(String s, int low, int high) {
        while (low < high) {
            if (s.charAt(low++) != s.charAt(high--)) return false;
        }
        return true;
    }
}






Algorithm

A given string ss starting at index \text{start}start and ending at index \text{end}end is a palindrome if following conditions are satisfied :

The characters at \text{start}start and \text{end}end indexes are equal.
The substring starting at index \text{start}+1start+1 and ending at index \text{end}-1end−1 is a palindrome.
Let NN be the length of the string. To determine if a substring starting at index \text{start}start and ending at index \text{end}end is a palindrome or not, we use a 2 Dimensional array \text{dp}dp of size N \cdot NN⋅N where,

\text{dp[start][end]} = \text{true}dp[start][end]=true , if the substring beginning at index \text{start}start and ending at index \text{end}end is a palindrome.

Otherwise, \text{dp[start][end] }== \text{false}dp[start][end] ==false.

Also, we must update the \text{dp}dp array, if we find that the current string is a palindrome.
