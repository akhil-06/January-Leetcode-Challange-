Burst balloon is a very intresting problem, we cant do this by recursion because then the time for n=20, it can take upto 3168 years, while in dp it takes less than 1 sec
TC in DP is n cube
TC in recursion is n(!n)

Logic-> for large problem we need small problem ans, so it is a DP problem
         We use window approach and DP both are used in this question.
  
  
 Intution -> In our case window is left + element + right, so hum kya krege we will traverse over the window 1 to N and there is a boundary which is left and right on both edges.
             so you donot go out of bound. And I have i pointer and when i is pointing to some element, then it means we have to burst this element at last. If window size is 1 then our left and right is on same element and if our window size is 2 then left is on currelement -1 and right is on element. If we move with that window then both left anf right will move. So left pointer is -> 1 to N-window size + 1 and   Right is -> left + windowsize -1;    and then we have i which move in this window and we assume ith element is to be deleted last. And our ans is at dp[1][N]
             
    
Coding approach -> We make a dp, fill whole dp with 0, for filling if ws is 1 we iterate through all elements, so left and right on same element,so you check already max present                      and with 1 elemet, this is last also, so left*right*element, and if this is larger than max , ypdate the value. In the same fashion update the window size. 

Lets say windo size is 3 -> then, hum pahle 1st element lege ws ka, uska nikalege product and ws k 2nd and 3rd element nhi hoge uske lia, then product aaya and then vo 2,3 dp pr ans dekehega usko add kro and hum 1,3 pr product + 2,3 wala ans likh dege. Now i increase, ii aagay hai 2nd element pr now 1st and 3rd element gone for this, product is 1st k side wala * element * right k side wala and + me left pe ek element so dp me 1,1 dekho and for right dp me 3,3 dekeho.    teeno ko add kro vo likho dp at 1,3 pr pahle 1st wala compare kro and new compare kro jo jyada ho paste that .   Sma e for 3rd element

So 1,3 pr teeno i me jiska ns jyada ho usko likho. 


Code -> 

public int maxCoins(int[] nums) {
        int n = nums.length;
        int arr[] = new int[n+2];
        arr[0] = arr[n+1] = 1;   // Giving padding of 1 to the corner elements
        for(int i=1;i<=n;i++){
            arr[i] = nums[i-1];   //final padded array
        }
        
        int dp[][] = new int[n+2][n+2];
        
        for(int window = 1;window<=n;window++){     // window size
		
            for(int left = 1;left<=n-window+1;left++){    // left pointer
			
                int right = left+window-1;               // right pointer
				
                for(int i=left;i<=right;i++){           // iterate from left to right
				
                    dp[left][right] = Math.max(dp[left][right], (arr[left-1]*arr[i]*arr[right+1]) + dp[left][i-1] + dp[i+1][right]);
                                    
                }
            }
        }
        return dp[1][n];
    }
